/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new user.
         * @description Create a new user.
         */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the user to retrieve, or "me". */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get a user by ID.
         * @description Get a user by ID. `me` can also be used. Right now it will only return the current user itself.
         */
        get: operations["getUserById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new session.
         * @description Create a new user session that should be used to authenticate the user.
         */
        post: operations["createSession"];
        /**
         * Delete a session.
         * @description Delete a user session.
         */
        delete: operations["deleteSession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blog/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get blog posts.
         * @description Retrieve a list of blog posts.
         */
        get: operations["getBlogPosts"];
        put?: never;
        /**
         * Create a new blog post.
         * @description Create a blog post.
         */
        post: operations["createBlogPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blog/posts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the blog post. */
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a blog post.
         * @description Delete a blog post.
         */
        delete: operations["deleteBlogPost"];
        options?: never;
        head?: never;
        /**
         * Update a new blog post.
         * @description Update a blog post.
         */
        patch: operations["updateBlogPost"];
        trace?: never;
    };
    "/blog/posts/{idOrSlug}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or slug of the blog post */
                idOrSlug: string;
            };
            cookie?: never;
        };
        /**
         * Get blog posts.
         * @description Retrieve a list of blog posts.
         */
        get: operations["getBlogPost"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Object returned to any query that fails with an error code that expects a body (400, 409, ...) */
        ErrorResponse: {
            /**
             * @description Error Code
             * @example 400
             */
            code: number;
            /**
             * @description Descriptive error message
             * @example user must be logged in to make the request
             */
            message: string;
            /**
             * @description The name of the field/param that caused the error
             * @example id
             */
            field?: string;
            /**
             * @description Location of where the field/param was found
             * @example body
             * @enum {string}
             */
            location?: "query" | "path" | "body" | "header" | "cookie";
        };
        /** @description User object */
        User: {
            /**
             * Format: uuid
             * @description The ID of the user.
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description The name of the user.
             * @example John Doe
             */
            name: string;
            /**
             * Format: email
             * @description The email of the user.
             * @example user@example.com
             */
            email: string;
        };
        /** @description User session object */
        Session: {
            /**
             * Format: uuid
             * @description The ID of the user.
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            token: string;
            /**
             * Format: uuid
             * @description Id of the user attached to this sessions.
             * @example 259d9d82-bdd7-4a8a-be4f-76b156b46203
             */
            userId: string;
            /**
             * Format: uuid
             * @description Token to use to refresh the session after it expired.
             * @example da315121-65f2-4661-9ad2-fdf40d494998
             */
            refreshToken: string;
            /**
             * Format: date-time
             * @description Date at which the session expires.
             * @example 2023-10-31T23:59:59Z
             */
            expiresAt: string;
        };
        /** @description The content of the blog post in JSON format. */
        EditorJS: {
            /**
             * @description The version of the post
             * @example 1.0
             */
            version?: string;
            /**
             * @description Time at which it has been last edited
             * @example 1698796799
             */
            time?: number;
            /**
             * @description Content of the post
             * @example [
             *       {
             *         "id": "1",
             *         "type": "paragraph",
             *         "data": {
             *           "text": "This is a paragraph."
             *         }
             *       },
             *       {
             *         "id": "2",
             *         "type": "header",
             *         "data": {
             *           "text": "This is a header.",
             *           "level": 2
             *         }
             *       }
             *     ]
             */
            blocks: {
                /**
                 * @description Id of the block
                 * @example 1
                 */
                id?: string;
                /**
                 * @description Type of the block (e.g., paragraph, header)
                 * @example paragraph
                 */
                type: string;
                /** @description Data of the block */
                data: {
                    [key: string]: unknown;
                };
                /** @description Tunes of the block */
                tunes?: {
                    [key: string]: unknown;
                };
            }[];
        };
        /** @description represents a blog post */
        BlogPost: {
            /**
             * Format: uuid
             * @description The ID of the blog post.
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Title of the blog post.
             * @example My awesome blog post
             */
            title: string;
            /**
             * @description slug of the blog post.
             * @example my-awesome-blog-post
             */
            slug: string;
            contentJson: components["schemas"]["EditorJS"];
            /**
             * @description Short description of the blog post.
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            description?: string;
            /**
             * Format: url
             * @description URL of the thumbnail to display.
             * @example https://picsum.photos/200/300
             */
            thumbnailUrl?: string;
            /**
             * Format: date-time
             * @description Date at which the post has been published.
             * @example 2023-10-31T23:59:59Z
             */
            publishedAt?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type ErrorResponse = components['schemas']['ErrorResponse'];
export type User = components['schemas']['User'];
export type Session = components['schemas']['Session'];
export type EditorJs = components['schemas']['EditorJS'];
export type BlogPost = components['schemas']['BlogPost'];
export type $defs = Record<string, never>;
export interface operations {
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Data that is needed to create a new user. */
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The name of the user.
                     * @example John Doe
                     */
                    name: string;
                    /**
                     * Format: email
                     * @description The email of the user.
                     * @example user@example.com
                     */
                    email: string;
                    /**
                     * Format: password
                     * @description The password of the user.
                     * @example my p@55w0rd
                     */
                    password: string;
                };
            };
        };
        responses: {
            /** @description Successfully created the user */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The path/body/query/header contains missing or invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The user is already logged in */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The email is already being used */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Something wrong happened */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The endpoint has been disabled */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the user to retrieve, or "me". */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized access - User must be logged in to make the request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Something wrong happened */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Data that is needed to create a new session. */
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: email
                     * @description The email of the user.
                     * @example user@example.com
                     */
                    email: string;
                    /**
                     * Format: password
                     * @description The password of the user.
                     * @example my p@55w0rd
                     */
                    password: string;
                };
            };
        };
        responses: {
            /** @description Successfully created the session */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        session: components["schemas"]["Session"];
                        me: components["schemas"]["User"];
                    };
                };
            };
            /** @description The path/body/query/header contains missing or invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The user is already logged in */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Something wrong happened */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the session */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access - User must be logged in to make the request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Something went wrong */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getBlogPosts: {
        parameters: {
            query?: {
                /** @description All the posts should have been published after this date. */
                after?: string;
                /** @description All the posts should have been published before this date. */
                before?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved a list of post */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlogPost"][];
                };
            };
            /** @description The path/body/query/header contains missing or invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Something wrong happened */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The endpoint has been disabled */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createBlogPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Data that is needed to create a new blog post. */
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Title of the blog post.
                     * @example My awesome blog post
                     */
                    title: string;
                    /**
                     * @description slug of the blog post.
                     * @example my-awesome-blog-post
                     */
                    slug?: string;
                    contentJson: components["schemas"]["EditorJS"];
                    /**
                     * @description Short description of the blog post.
                     * @example some description
                     */
                    description?: string;
                    /**
                     * Format: url
                     * @description URL of the thumbnail to display.
                     * @example https://picsum.photos/200/300
                     */
                    thumbnailUrl?: string;
                    /**
                     * @description publish the post.
                     * @example true
                     */
                    publish?: boolean;
                };
            };
        };
        responses: {
            /** @description Successfully created a new blog post */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlogPost"];
                };
            };
            /** @description The path/body/query/header contains missing or invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized access - User must be logged in to make the request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The post does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The slug, or another unique data is already being used */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Something wrong happened */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The endpoint has been disabled */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteBlogPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the blog post. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the blog post */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The path/body/query/header contains missing or invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized access - User must be logged in to make the request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Something wrong happened */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The endpoint has been disabled */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateBlogPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the blog post. */
                id: string;
            };
            cookie?: never;
        };
        /** @description Data that is available to update a blog post. */
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Title of the blog post.
                     * @example My awesome blog post
                     */
                    title?: string;
                    /**
                     * @description slug of the blog post.
                     * @example my-awesome-blog-post
                     */
                    slug?: string;
                    contentJson?: components["schemas"]["EditorJS"];
                    /**
                     * @description Short description of the blog post.
                     * @example some description
                     */
                    description?: string;
                    /**
                     * Format: url
                     * @description URL of the thumbnail to display.
                     * @example https://picsum.photos/200/300
                     */
                    thumbnailUrl?: string;
                    /**
                     * @description publish the post.
                     * @example true
                     */
                    publish?: boolean;
                };
            };
        };
        responses: {
            /** @description Successfully updated the blog post */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlogPost"];
                };
            };
            /** @description The path/body/query/header contains missing or invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized access - User must be logged in to make the request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The blog post was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The slug, or another unique data is already being used */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Something wrong happened */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The endpoint has been disabled */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getBlogPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or slug of the blog post */
                idOrSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved a post */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlogPost"];
                };
            };
            /** @description The path/body/query/header contains missing or invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Blog post not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Something wrong happened */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The endpoint has been disabled */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
