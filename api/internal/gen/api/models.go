// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ErrorResponseLocation.
const (
	Body   ErrorResponseLocation = "body"
	Cookie ErrorResponseLocation = "cookie"
	Header ErrorResponseLocation = "header"
	Path   ErrorResponseLocation = "path"
	Query  ErrorResponseLocation = "query"
)

// BlogPost represents a blog post
type BlogPost struct {
	// ContentJson The content of the blog post in JSON format.
	ContentJson struct {
		// Blocks Content of the post
		Blocks *[]struct {
			// Data Data of the block
			Data *map[string]interface{} `json:"data,omitempty"`

			// Id Id of the block
			Id *string `json:"id,omitempty"`

			// Type Type of the block (e.g., paragraph, header)
			Type *string `json:"type,omitempty"`
		} `json:"blocks,omitempty"`

		// Time Time at which it has been last edited
		Time *float32 `json:"time,omitempty"`

		// Version The version of the post
		Version *string `json:"version,omitempty"`
	} `json:"contentJson"`

	// Description Short description of the blog post.
	Description *string `json:"description,omitempty"`

	// Id The ID of the blog post.
	Id openapi_types.UUID `json:"id"`

	// PublishedAt Date at which the post has been published.
	PublishedAt *time.Time `json:"publishedAt,omitempty"`

	// Slug slug of the blog post.
	Slug openapi_types.UUID `json:"slug"`

	// ThumbnailUrl URL of the thumbnail to display.
	ThumbnailUrl *string `json:"thumbnailUrl,omitempty"`

	// Title Title of the blog post.
	Title openapi_types.UUID `json:"title"`
}

// ErrorResponse Object returned to any query that fails with an error code that expects a body (400, 409, ...)
type ErrorResponse struct {
	// Field The name of the field/param that caused the error
	Field *string `json:"field,omitempty"`

	// Location Location of where the field/param was found
	Location *ErrorResponseLocation `json:"location,omitempty"`

	// Message Descriptive error message
	Message string `json:"message"`
}

// ErrorResponseLocation Location of where the field/param was found
type ErrorResponseLocation string

// Session User session object
type Session struct {
	// ExpiresAt Date at which the session expires.
	ExpiresAt time.Time `json:"expiresAt"`

	// RefreshToken Token to use to refresh the session after it expired.
	RefreshToken openapi_types.UUID `json:"refreshToken"`

	// Token The ID of the user.
	Token openapi_types.UUID `json:"token"`

	// UserId Id of the user attached to this sessions.
	UserId openapi_types.UUID `json:"userId"`
}

// User User object
type User struct {
	// Email The email of the user.
	Email openapi_types.Email `json:"email"`

	// Id The ID of the user.
	Id openapi_types.UUID `json:"id"`

	// Name The name of the user.
	Name string `json:"name"`
}

// AlreadyLoggedIn Object returned to any query that fails with an error code that expects a body (400, 409, ...)
type AlreadyLoggedIn = ErrorResponse

// NotLoggedIn Object returned to any query that fails with an error code that expects a body (400, 409, ...)
type NotLoggedIn = ErrorResponse

// ParamError Object returned to any query that fails with an error code that expects a body (400, 409, ...)
type ParamError = ErrorResponse

// CreateSessionJSONBody defines parameters for CreateSession.
type CreateSessionJSONBody struct {
	// Email The email of the user.
	Email openapi_types.Email `json:"email"`

	// Password The password of the user.
	Password string `json:"password"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	// Email The email of the user.
	Email openapi_types.Email `json:"email" validate:"required,max=255"`

	// Name The name of the user.
	Name string `json:"name" validate:"required,min=1,max=50"`

	// Password The password of the user.
	Password string `json:"password" validate:"required,min=8,max=50"`
}

// GetBlogPostsParams defines parameters for GetBlogPosts.
type GetBlogPostsParams struct {
	// After All the posts should have been published after this date.
	After *time.Time `form:"after,omitempty" json:"after,omitempty"`

	// Before All the posts should have been published before this date.
	Before *time.Time `form:"before,omitempty" json:"before,omitempty"`
}

// CreateBlogPostJSONBody defines parameters for CreateBlogPost.
type CreateBlogPostJSONBody struct {
	// ContentJson The content of the blog post in JSON format.
	ContentJson struct {
		// Blocks Content of the post
		Blocks *[]struct {
			// Data Data of the block
			Data *map[string]interface{} `json:"data,omitempty"`

			// Id Id of the block
			Id *string `json:"id,omitempty"`

			// Type Type of the block (e.g., paragraph, header)
			Type *string `json:"type,omitempty"`
		} `json:"blocks,omitempty"`

		// Time Time at which it has been last edited
		Time *float32 `json:"time,omitempty"`

		// Version The version of the post
		Version *string `json:"version,omitempty"`
	} `json:"contentJson"`

	// Description Short description of the blog post.
	Description *string `json:"description,omitempty"`

	// Publish publish the post.
	Publish *bool `json:"publish,omitempty"`

	// Slug slug of the blog post.
	Slug openapi_types.UUID `json:"slug"`

	// ThumbnailUrl URL of the thumbnail to display.
	ThumbnailUrl *string `json:"thumbnailUrl,omitempty"`

	// Title Title of the blog post.
	Title openapi_types.UUID `json:"title"`
}

// UpdateBlogPostJSONBody defines parameters for UpdateBlogPost.
type UpdateBlogPostJSONBody struct {
	// ContentJson The content of the blog post in JSON format.
	ContentJson *struct {
		// Blocks Content of the post
		Blocks *[]struct {
			// Data Data of the block
			Data *map[string]interface{} `json:"data,omitempty"`

			// Id Id of the block
			Id *string `json:"id,omitempty"`

			// Type Type of the block (e.g., paragraph, header)
			Type *string `json:"type,omitempty"`
		} `json:"blocks,omitempty"`

		// Time Time at which it has been last edited
		Time *float32 `json:"time,omitempty"`

		// Version The version of the post
		Version *string `json:"version,omitempty"`
	} `json:"contentJson,omitempty"`

	// Description Short description of the blog post.
	Description *string `json:"description,omitempty"`

	// Publish publish or un-publish the post.
	Publish *bool `json:"publish,omitempty"`

	// Slug slug of the blog post.
	Slug *openapi_types.UUID `json:"slug,omitempty"`

	// ThumbnailUrl URL of the thumbnail to display.
	ThumbnailUrl *string `json:"thumbnailUrl,omitempty"`

	// Title Title of the blog post.
	Title *openapi_types.UUID `json:"title,omitempty"`
}

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody CreateSessionJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// CreateBlogPostJSONRequestBody defines body for CreateBlogPost for application/json ContentType.
type CreateBlogPostJSONRequestBody CreateBlogPostJSONBody

// UpdateBlogPostJSONRequestBody defines body for UpdateBlogPost for application/json ContentType.
type UpdateBlogPostJSONRequestBody UpdateBlogPostJSONBody
