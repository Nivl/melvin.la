// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ErrorResponseLocation.
const (
	Body   ErrorResponseLocation = "body"
	Cookie ErrorResponseLocation = "cookie"
	Header ErrorResponseLocation = "header"
	Path   ErrorResponseLocation = "path"
	Query  ErrorResponseLocation = "query"
)

// Defines values for FortniteGetStatsParamsPlatform.
const (
	Epic FortniteGetStatsParamsPlatform = "epic"
	Psn  FortniteGetStatsParamsPlatform = "psn"
	Xbl  FortniteGetStatsParamsPlatform = "xbl"
)

// Defines values for FortniteGetStatsParamsTimeWindow.
const (
	Lifetime FortniteGetStatsParamsTimeWindow = "lifetime"
	Season   FortniteGetStatsParamsTimeWindow = "season"
)

// ErrorResponse Object returned to any query that fails with an error code that expects a body (400, 409, ...)
type ErrorResponse struct {
	// Code Error Code
	Code int `json:"code"`

	// Field The name of the field/param that caused the error
	Field *string `json:"field,omitempty"`

	// Location Location of where the field/param was found
	Location *ErrorResponseLocation `json:"location,omitempty"`

	// Message Descriptive error message
	Message string `json:"message"`
}

// ErrorResponseLocation Location of where the field/param was found
type ErrorResponseLocation string

// FortniteStats The content of the Stats endpoint.
type FortniteStats struct {
	// Data Data of the response
	Data struct {
		// Account information about the player's account
		Account struct {
			// ID ID of the account
			ID string `json:"id"`

			// Name Name of the account
			Name string `json:"name"`
		} `json:"account"`

		// BattlePass information about the player's battle pass
		BattlePass struct {
			// Level Current level of the player
			Level int `json:"level"`

			// Progress Progress in % toward the next level
			Progress int `json:"progress"`
		} `json:"battlePass"`

		// Stats information about the player's battle pass
		Stats struct {
			// All The categories holding stats.
			All FortniteStatsCategories `json:"all"`

			// Gamepad The categories holding stats.
			Gamepad *FortniteStatsCategories `json:"gamepad,omitempty"`

			// KeyboardMouse The categories holding stats.
			KeyboardMouse *FortniteStatsCategories `json:"keyboardMouse,omitempty"`

			// Touch The categories holding stats.
			Touch *FortniteStatsCategories `json:"touch,omitempty"`
		} `json:"stats"`
	} `json:"data"`

	// Status HTTP Status of the response
	Status int `json:"status"`
}

// FortniteStatsCategories The categories holding stats.
type FortniteStatsCategories struct {
	// Duo represents the actual stats of a Fortnite player.
	Duo *FortniteStatsDetails `json:"duo,omitempty"`

	// Ltm represents the actual stats of a Fortnite player.
	Ltm *FortniteStatsDetails `json:"ltm,omitempty"`

	// Overall represents the actual stats of a Fortnite player.
	Overall FortniteStatsDetails `json:"overall"`

	// Solo represents the actual stats of a Fortnite player.
	Solo *FortniteStatsDetails `json:"solo,omitempty"`

	// Squad represents the actual stats of a Fortnite player.
	Squad *FortniteStatsDetails `json:"squad,omitempty"`
}

// FortniteStatsDetails represents the actual stats of a Fortnite player.
type FortniteStatsDetails struct {
	// Deaths Total amount of time the player died.
	Deaths int `json:"deaths"`

	// Kd kill/Death ratio.
	Kd float64 `json:"kd"`

	// Kills Total amount of enemies killed.
	Kills float64 `json:"kills"`

	// KillsPerMatch Average of enemies killed per match.
	KillsPerMatch float64 `json:"killsPerMatch"`

	// KillsPerMin Average of enemies killed per minute.
	KillsPerMin float64 `json:"killsPerMin"`

	// LastModified Last time the player's stats were modified.
	LastModified string `json:"lastModified"`

	// Matches Total amount of matches played.
	Matches int `json:"matches"`

	// MinutesPlayed Total amount of minutes played.
	MinutesPlayed int `json:"minutesPlayed"`

	// PlayersOutlived Total amount of players outlived.
	PlayersOutlived int `json:"playersOutlived"`

	// Score Total score of the player.
	Score int `json:"score"`

	// ScorePerMatch Average score per match played.
	ScorePerMatch float64 `json:"scorePerMatch"`

	// ScorePerMin Average score per minute played.
	ScorePerMin float64 `json:"scorePerMin"`

	// Top10 Total amount of top 10 placements.
	Top10 *int `json:"top10,omitempty"`

	// Top12 Total amount of top 12 placements.
	Top12 *int `json:"top12,omitempty"`

	// Top25 Total amount of top 25 placements.
	Top25 *int `json:"top25,omitempty"`

	// Top3 Total amount of top 3 placements.
	Top3 *int `json:"top3,omitempty"`

	// Top5 Total amount of top 5 placements.
	Top5 *int `json:"top5,omitempty"`

	// Top6 Total amount of top 6 placements.
	Top6 *int `json:"top6,omitempty"`

	// WinRate How often the player wins, in %.
	WinRate float64 `json:"winRate"`

	// Wins Total amount of victory royales.
	Wins int `json:"wins"`
}

// FortniteGetStatsParamsPlatform defines parameters for FortniteGetStats.
type FortniteGetStatsParamsPlatform string

// FortniteGetStatsParamsTimeWindow defines parameters for FortniteGetStats.
type FortniteGetStatsParamsTimeWindow string
