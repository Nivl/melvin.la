// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse Object returned to any query that fails with an error code that expects a body (400, 409, ...)
type ErrorResponse struct {
	// Field The name of the field/param that caused the error
	Field *string `json:"field,omitempty"`

	// Message Descriptive error message
	Message string `json:"message"`
}

// Session User session object
type Session struct {
	// ExpiresAt Date at which the session expires.
	ExpiresAt string `json:"expiresAt"`

	// RefreshToken Token to use to refresh the session after it expired.
	RefreshToken string `json:"refreshToken"`

	// Token The ID of the user.
	Token string `json:"token"`

	// UserId Id of the user attached to this sessions.
	UserId string `json:"userId"`
}

// User User object
type User struct {
	// Email The email of the user.
	Email string `json:"email"`

	// Id The ID of the user.
	Id string `json:"id"`

	// Name The name of the user.
	Name string `json:"name"`
}

// AlreadyLoggedIn Object returned to any query that fails with an error code that expects a body (400, 409, ...)
type AlreadyLoggedIn = ErrorResponse

// BodyError Object returned to any query that fails with an error code that expects a body (400, 409, ...)
type BodyError = ErrorResponse

// CreateSessionJSONBody defines parameters for CreateSession.
type CreateSessionJSONBody struct {
	// Email The email of the user.
	Email string `json:"email"`

	// Password The password of the user.
	Password string `json:"password"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	// Email The email of the user.
	Email string `json:"email"`

	// Name The name of the user.
	Name string `json:"name"`

	// Password The password of the user.
	Password string `json:"password"`
}

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody CreateSessionJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new user.
	// (POST /sessions)
	CreateSession(ctx echo.Context) error
	// Create a new user.
	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Get a user by ID.
	// (GET /users/{id})
	GetUserById(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateSession converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSession(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateSession(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// GetUserById converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/sessions", wrapper.CreateSession)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.GET(baseURL+"/users/:id", wrapper.GetUserById)

}
