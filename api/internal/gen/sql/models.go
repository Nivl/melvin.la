// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package dbpublic

import (
	"net/netip"

	blog "github.com/Nivl/melvin.la/api/internal/services/blog"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type BlogPost struct {
	ID           uuid.UUID           `db:"id"`
	Title        string              `db:"title"`
	Slug         string              `db:"slug"`
	ThumbnailURL *string             `db:"thumbnail_url"`
	Description  *string             `db:"description"`
	ContentJSON  blog.EditorJSOutput `db:"content_json"`
	PublishedAt  pgtype.Timestamptz  `db:"published_at"`
	CreatedAt    pgtype.Timestamptz  `db:"created_at"`
	UpdatedAt    pgtype.Timestamptz  `db:"updated_at"`
	DeletedAt    pgtype.Timestamptz  `db:"deleted_at"`
}

type BlogPostRev struct {
	ID           uuid.UUID           `db:"id"`
	BlogPostID   uuid.UUID           `db:"blog_post_id"`
	Title        string              `db:"title"`
	Slug         string              `db:"slug"`
	ThumbnailURL *string             `db:"thumbnail_url"`
	Description  *string             `db:"description"`
	ContentJSON  blog.EditorJSOutput `db:"content_json"`
	CreatedAt    pgtype.Timestamptz  `db:"created_at"`
	DeletedAt    pgtype.Timestamptz  `db:"deleted_at"`
}

type SchemaMigration struct {
	Version int64 `db:"version"`
	Dirty   bool  `db:"dirty"`
}

type User struct {
	ID             uuid.UUID          `db:"id"`
	Email          string             `db:"email"`
	Password       string             `db:"password"`
	PasswordCrypto string             `db:"password_crypto"`
	Name           string             `db:"name"`
	CreatedAt      pgtype.Timestamptz `db:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
}

type UserSession struct {
	Token        uuid.UUID          `db:"token"`
	UserID       uuid.UUID          `db:"user_id"`
	CreatedAt    pgtype.Timestamptz `db:"created_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at"`
	DeletedAt    pgtype.Timestamptz `db:"deleted_at"`
	RefreshToken uuid.UUID          `db:"refresh_token"`
	ExpiresAt    pgtype.Timestamptz `db:"expires_at"`
	RefreshedAs  uuid.UUID          `db:"refreshed_as"`
	IPAddress    *netip.Prefix      `db:"ip_address"`
}
